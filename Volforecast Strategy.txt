import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import os
import time
import logging

class VolForecastStrategy:
    def __init__(
        self,
        ticker="^BVSP",
        window_vol=20,
        threshold=None,  # substituindo desvio_std
        max_drawdown=0.25,
        start="2020-01-01",
        end=None,
        freq="daily",
        capital_inicial=10000,
        tentativas=3,
        intervalo_tentativas=5
    ):
        self.ticker = ticker
        self.window_vol = window_vol
        self.desvio_std = threshold if threshold is not None else 1.7
        self.threshold = threshold
        self.max_drawdown = max_drawdown
        self.start = start
        self.end = end
        self.freq = freq
        self.capital_inicial = capital_inicial
        self.tentativas = tentativas
        self.intervalo_tentativas = intervalo_tentativas
        self.precos = None
        self.sinais = None
        self.resultados = None
        self.operacoes = []

        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger('VolForecast')

    def baixar_dados(self):
        cache_file = f"{self.ticker.replace('^', '').replace('=', '')}_cache.csv"
        if os.path.exists(cache_file):
            self.logger.info(f"Carregando dados de cache: {cache_file}")
            self.precos = pd.read_csv(cache_file, index_col=0, parse_dates=True)
            self.precos.columns = ['close']
            return

        for i in range(self.tentativas):
            try:
                self.logger.info(f"Tentativa {i+1}/{self.tentativas} de baixar dados para {self.ticker}")
                dados = yf.download(
                    self.ticker,
                    start=self.start,
                    end=self.end,
                    progress=False
                )

                if not dados.empty:
                    self.precos = dados[['Close']].copy()
                    self.precos.columns = ['close']
                    self.logger.info(f"Dados baixados com sucesso para {self.ticker}")
                    self.precos.to_csv(cache_file)
                    self.logger.info(f"Dados salvos em cache: {cache_file}")
                    return

            except Exception as e:
                self.logger.warning(f"Erro na tentativa {i+1}: {str(e)}")

            if i < self.tentativas - 1:
                self.logger.info(f"Aguardando {self.intervalo_tentativas} segundos...")
                time.sleep(self.intervalo_tentativas)

        raise ValueError(f"Falha ao baixar dados após {self.tentativas} tentativas")

    def calcular_sinais(self):
        if self.precos is None or self.precos.empty:
            raise ValueError("Dados de preços não disponíveis")

        self.precos['retorno'] = np.log(self.precos['close'] / self.precos['close'].shift(1))
        self.precos['volatilidade'] = self.precos['retorno'].rolling(self.window_vol).std() * np.sqrt(252)

        self.precos['banda_superior'] = self.precos['close'] * (1 + self.desvio_std * self.precos['volatilidade'] / np.sqrt(252))
        self.precos['banda_inferior'] = self.precos['close'] * (1 - self.desvio_std * self.precos['volatilidade'] / np.sqrt(252))

        self.precos['sinal'] = 0
        self.precos.loc[self.precos['close'] > self.precos['banda_superior'], 'sinal'] = -1
        self.precos.loc[self.precos['close'] < self.precos['banda_inferior'], 'sinal'] = 1

        self.sinais = self.precos[['sinal']].copy()

    def executar_backtest(self):
        if self.sinais is None:
            raise ValueError("Sinais não calculados")

        capital = self.capital_inicial
        posicao = 0
        preco_entrada = 0
        max_capital = capital
        capital_hist = [capital]
        drawdowns = [0]
        datas = [self.precos.index[0]]
        self.operacoes = []
        stop = False

        for i in range(1, len(self.precos)):
            if stop:
                break

            data = self.precos.index[i]
            preco_atual = self.precos.iloc[i]['close']
            sinal = self.sinais.iloc[i]['sinal']

            if capital > max_capital:
                max_capital = capital
            drawdown = (max_capital - capital) / max_capital
            drawdowns.append(drawdown)

            if drawdown >= self.max_drawdown:
                self.logger.warning(f"Stop-loss acionado por drawdown em {data}")
                stop = True
                break

            if posicao != 0 and sinal != np.sign(posicao):
                retorno = posicao * (preco_atual / preco_entrada - 1)
                capital *= (1 + retorno)
                self.operacoes.append({
                    'data': data,
                    'tipo': 'Fechamento',
                    'preco': preco_atual,
                    'retorno': retorno,
                    'capital': capital
                })
                posicao = 0
                preco_entrada = 0

            if posicao == 0 and sinal != 0:
                posicao = sinal * (capital / preco_atual)
                preco_entrada = preco_atual
                self.operacoes.append({
                    'data': data,
                    'tipo': 'Compra' if sinal > 0 else 'Venda',
                    'preco': preco_atual,
                    'retorno': 0,
                    'capital': capital
                })

            capital_hist.append(capital)
            datas.append(data)

        if posicao != 0:
            retorno = posicao * (preco_atual / preco_entrada - 1)
            capital *= (1 + retorno)
            self.operacoes.append({
                'data': self.precos.index[-1],
                'tipo': 'Fechamento Final',
                'preco': preco_atual,
                'retorno': retorno,
                'capital': capital
            })

        self.resultados = pd.DataFrame({
            'data': datas,
            'capital': capital_hist,
            'drawdown': drawdowns
        }).set_index('data')

    def run(self):
        self.baixar_dados()
        self.calcular_sinais()
        self.executar_backtest()
        return self.resultados, pd.DataFrame(self.operacoes)

    def summary(self):
        if self.resultados is None:
            raise ValueError("Backtest não executado")

        retorno_total = (self.resultados['capital'].iloc[-1] / self.capital_inicial - 1) * 100
        max_drawdown = self.resultados['drawdown'].max() * 100
        num_operacoes = len(self.operacoes)

        print("\n" + "="*50)
        print("RESUMO DA ESTRATÉGIA")
        print("="*50)
        print(f"Ativo: {self.ticker}")
        print(f"Período: {self.resultados.index[0].date()} a {self.resultados.index[-1].date()}")
        print(f"Capital Inicial: R${self.capital_inicial:,.2f}")
        print(f"Capital Final: R${self.resultados['capital'].iloc[-1]:,.2f}")
        print(f"Retorno Total: {retorno_total:.2f}%")
        print(f"Máximo Drawdown: {max_drawdown:.2f}%")
        print(f"Número de Operações: {num_operacoes}")
        print("="*50 + "\n")

    def plot(self):
        if self.resultados is None or self.precos is None:
            raise ValueError("Dados não disponíveis para plotagem")

        fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10), sharex=True)

        ax1.plot(self.precos['close'], label='Preço')
        ax1.plot(self.precos['banda_superior'], 'r--', alpha=0.7, label='Banda Superior')
        ax1.plot(self.precos['banda_inferior'], 'g--', alpha=0.7, label='Banda Inferior')
        ax1.set_title(f'Evolução de Preços - {self.ticker}')
        ax1.set_ylabel('Preço')
        ax1.legend()
        ax1.grid(True)

        ax2.plot(self.resultados['capital'], 'b-', label='Capital')
        ax2.set_title('Evolução do Capital')
        ax2.set_ylabel('Capital (R$)')
        ax2.grid(True)

        ax3.plot(self.resultados['drawdown'] * 100, 'r-', label='Drawdown')
        ax3.axhline(y=self.max_drawdown * 100, color='black', linestyle='--', label='Limite Drawdown')
        ax3.set_title('Drawdown')
        ax3.set_ylabel('Drawdown (%)')
        ax3.set_xlabel('Data')
        ax3.grid(True)

        plt.tight_layout()
        plt.show()
